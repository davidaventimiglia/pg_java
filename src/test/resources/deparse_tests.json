{
    "tests": [
	{"id": 0, "sql": "SELECT 1"},
	{"id": 1, "sql": "SELECT 1; SELECT 2"},
	{"id": 2, "sql": "SELECT 1 FROM t(1)"},
	{"id": 3, "sql": "SELECT sum(unique1) FILTER (WHERE unique1 IN (SELECT unique1 FROM onek WHERE unique1 < 100)) FROM tenk1"},
	{"id": 4, "sql": "SELECT a AS b FROM x WHERE y = 5 AND z = y"},
	{"id": 5, "sql": "SELECT FROM x WHERE y = 5 AND z = y"},
	{"id": 6, "sql": "SELECT a AS b FROM public.x WHERE y = 5 AND z = y"},
	{"id": 7, "sql": "SELECT DISTINCT a, b, * FROM c WHERE d = e"},
	{"id": 8, "sql": "SELECT DISTINCT ON (a) a, b FROM c"},
	{"id": 9, "sql": "SELECT * INTO films_recent FROM films WHERE date_prod >= '2002-01-01'"},
	{"id": 10, "sql": "SELECT current_timestamp"},
	{"id": 11, "sql": "SELECT current_time(2)"},
	{"id": 12, "sql": "SELECT memory_total_bytes, memory_swap_total_bytes - memory_swap_free_bytes AS swap, date_part(?, s.collected_at) AS collected_at FROM snapshots s JOIN system_snapshots ON snapshot_id = s.id WHERE s.database_id = ? AND s.collected_at >= ? AND s.collected_at <= ? ORDER BY collected_at ASC"},
	{"id": 13, "sql": "SELECT * FROM a ORDER BY x ASC NULLS FIRST"},
	{"id": 14, "sql": "SELECT * FROM a ORDER BY x ASC NULLS LAST"},
	{"id": 15, "sql": "SELECT * FROM a ORDER BY x COLLATE \"tr_TR\" DESC NULLS LAST"},
	{"id": 16, "sql": "SELECT 'foo' COLLATE \"tr_TR\"id"},
	{"id": 17, "sql": "WITH kodsis AS (SELECT * FROM application), kodsis2 AS (SELECT * FROM application) SELECT * FROM kodsis UNION SELECT * FROM kodsis ORDER BY id DESC"},
	{"id": 18, "sql": "SELECT id, name FROM table1 UNION (SELECT id, name FROM table2 ORDER BY name) ORDER BY id ASC"},
	{"id": 19, "sql": "SELECT a FROM kodsis EXCEPT SELECT a FROM application"},
	{"id": 20, "sql": "SELECT * FROM (VALUES ('anne', 'smith'), ('bob', 'jones'), ('joe', 'blow')) names(first, last)"},
	{"id": 21, "sql": "SELECT * FROM users WHERE name LIKE 'postgresql:%'"},
	{"id": 22, "sql": "SELECT * FROM users WHERE name NOT LIKE 'postgresql:%'"},
	{"id": 23, "sql": "SELECT * FROM users WHERE name ILIKE 'postgresql:%'"},
	{"id": 24, "sql": "SELECT * FROM users WHERE name NOT ILIKE 'postgresql:%'"},
	{"id": 25, "sql": "WITH t AS (SELECT random() AS x FROM generate_series(1, 3)) SELECT * FROM t"},
	{"id": 26, "sql": "WITH RECURSIVE search_graph(id, link, data, depth, path, cycle) AS (SELECT g.id, g.link, g.data, 1, ARRAY[ROW(g.f1, g.f2)], false FROM graph g UNION ALL SELECT g.id, g.link, g.data, sg.depth + 1, path || ROW(g.f1, g.f2), ROW(g.f1, g.f2) = ANY(path) FROM graph g, search_graph sg WHERE g.id = sg.link AND NOT cycle) SELECT id, data, link FROM search_graph"},
	{"id": 27, "sql": "SELECT OVERLAY(m.name PLACING '******' FROM 3 FOR 6) AS tc_kimlik FROM tb_test m"},
	{"id": 28, "sql": "SELECT sum(price_cents) FROM products"},
	{"id": 29, "sql": "SELECT ARRAY(SELECT id FROM products)::bigint[]"},
	{"id": 30, "sql": "SELECT m.name AS mname, pname FROM manufacturers m, LATERAL get_product_names(m.id) pname"},
	{"id": 31, "sql": "SELECT m.name AS mname, pname FROM manufacturers m LEFT JOIN LATERAL get_product_names(m.id) pname ON true"},
	{"id": 32, "sql": "SELECT * FROM tb_test_main mh JOIN LATERAL (SELECT ftnrm.* FROM test ftnrm WHERE ftnrm.hizmet_id = mh.id UNION ALL SELECT ftarc.* FROM test.test2 ftarc WHERE ftarc.hizmet_id = mh.id) ft ON true"},
	{"id": 33, "sql": "SELECT x, y FROM a CROSS JOIN b"},
	{"id": 34, "sql": "SELECT x, y FROM a NATURAL JOIN b"},
	{"id": 35, "sql": "SELECT x, y FROM a LEFT JOIN b ON 1 > 0"},
	{"id": 36, "sql": "SELECT x, y FROM a RIGHT JOIN b ON 1 > 0"},
	{"id": 37, "sql": "SELECT x, y FROM a FULL JOIN b ON 1 > 0"},
	{"id": 38, "sql": "SELECT x, y FROM a JOIN b USING (z)"},
	{"id": 39, "sql": "SELECT 2 + 2"},
	{"id": 40, "sql": "SELECT * FROM x WHERE y IS NULL"},
	{"id": 41, "sql": "SELECT * FROM x WHERE y IS NOT NULL"},
	{"id": 42, "sql": "SELECT count(*) FROM x WHERE y IS NOT NULL"},
	{"id": 43, "sql": "SELECT count(DISTINCT a) FROM x WHERE y IS NOT NULL"},
	{"id": 44, "sql": "SELECT CASE WHEN a.status = 1 THEN 'active' WHEN a.status = 2 THEN 'inactive' END FROM accounts a"},
	{"id": 45, "sql": "SELECT CASE 1 > 0 WHEN true THEN 'ok' ELSE NULL END"},
	{"id": 46, "sql": "SELECT CASE WHEN a.status = 1 THEN 'active' WHEN a.status = 2 THEN 'inactive' ELSE 'unknown' END FROM accounts a"},
	{"id": 47, "sql": "SELECT * FROM accounts WHERE status = CASE WHEN x = 1 THEN 'active' ELSE 'inactive' END"},
	{"id": 48, "sql": "SELECT CASE WHEN EXISTS (SELECT 1) THEN 1 ELSE 2 END"},
	{"id": 49, "sql": "SELECT (SELECT 'x')"},
	{"id": 50, "sql": "SELECT * FROM (SELECT generate_series(0, 100)) a"},
	{"id": 51, "sql": "SELECT * FROM x WHERE id IN (1, 2, 3)"},
	{"id": 52, "sql": "SELECT * FROM x WHERE id IN (SELECT id FROM account)"},
	{"id": 53, "sql": "SELECT * FROM x WHERE id NOT IN (1, 2, 3)"},
	{"id": 54, "sql": "SELECT * FROM x JOIN (SELECT n FROM z) b ON a.id = b.id"},
	{"id": 55, "sql": "SELECT * FROM x WHERE y = z[?]"},
	{"id": 56, "sql": "SELECT (foo(1)).y"},
	{"id": 57, "sql": "SELECT proname, (SELECT regexp_split_to_array(proargtypes::text, ' '))[idx] AS argtype, proargnames[idx] AS argname FROM pg_proc"},
	{"id": 58, "sql": "SELECT COALESCE((SELECT customer.sp_person(n.id) AS sp_person).city_id, NULL::int) AS city_id FROM customer.tb_customer n"},
	{"id": 59, "sql": "SELECT * FROM x WHERE y = z[?][?]"},
	{"id": 60, "sql": "SELECT (k #= hstore('{id}'::text[], ARRAY[1::text])).* FROM test k"},
	{"id": 61, "sql": "SELECT * FROM x WHERE NOT y"},
	{"id": 62, "sql": "SELECT * FROM x WHERE x OR y"},
	{"id": 63, "sql": "SELECT 1 WHERE (1 = 1 OR 1 = 2) AND 1 = 2"},
	{"id": 64, "sql": "SELECT 1 WHERE (1 = 1 AND 2 = 2) OR 2 = 3"},
	{"id": 65, "sql": "SELECT 1 WHERE 1 = 1 OR 2 = 2 OR 2 = 3"},
	{"id": 66, "sql": "SELECT * FROM x WHERE x = ALL(?)"},
	{"id": 67, "sql": "SELECT * FROM x WHERE x = ANY(?)"},
	{"id": 68, "sql": "SELECT * FROM x WHERE x = COALESCE(y, ?)"},
	{"id": 69, "sql": "SELECT a, b, max(c) FROM c WHERE d = 1 GROUP BY a, b"},
	{"id": 70, "sql": "SELECT * FROM x LIMIT 50"},
	{"id": 71, "sql": "SELECT * FROM x OFFSET 50"},
	{"id": 72, "sql": "SELECT amount * 0.5"},
	{"id": 73, "sql": "SELECT * FROM x WHERE x BETWEEN '2016-01-01' AND '2016-02-02'"},
	{"id": 74, "sql": "SELECT * FROM x WHERE x NOT BETWEEN '2016-01-01' AND '2016-02-02'"},
	{"id": 75, "sql": "SELECT * FROM x WHERE x BETWEEN SYMMETRIC 20 AND 10"},
	{"id": 76, "sql": "SELECT * FROM x WHERE x NOT BETWEEN SYMMETRIC 20 AND 10"},
	{"id": 77, "sql": "SELECT NULLIF(id, 0) AS id FROM x"},
	{"id": 78, "sql": "SELECT NULL FROM x"},
	{"id": 79, "sql": "SELECT * FROM x WHERE y IS TRUE"},
	{"id": 80, "sql": "SELECT * FROM x WHERE y IS NOT TRUE"},
	{"id": 81, "sql": "SELECT * FROM x WHERE y IS FALSE"},
	{"id": 82, "sql": "SELECT * FROM x WHERE y IS NOT FALSE"},
	{"id": 83, "sql": "SELECT * FROM x WHERE y IS UNKNOWN"},
	{"id": 84, "sql": "SELECT * FROM x WHERE y IS NOT UNKNOWN"},
	{"id": 85, "sql": "SELECT * FROM crosstab('SELECT department, role, COUNT(id) FROM users GROUP BY department, role ORDER BY department, role', 'VALUES (''admin''::text), (''ordinary''::text)') AS (department varchar, admin int, ordinary int)"},
	{"id": 86, "sql": "SELECT * FROM crosstab('SELECT department, role, COUNT(id) FROM users GROUP BY department, role ORDER BY department, role', 'VALUES (''admin''::text), (''ordinary''::text)') ctab (department varchar, admin int, ordinary int)"},
	{"id": 87, "sql": "SELECT row_cols[0] AS dept, row_cols[1] AS sub, admin, ordinary FROM crosstab('SELECT ARRAY[department, sub] AS row_cols, role, COUNT(id) FROM users GROUP BY department, role ORDER BY department, role', 'VALUES (''admin''::text), (''ordinary''::text)') AS (row_cols varchar[], admin int, ordinary int)"},
	{"id": 88, "sql": "SELECT 1::int8"},
	{"id": 89, "sql": "SELECT CAST(1 + 3 AS int8)"},
	{"id": 90, "sql": "SELECT ?::regclass"},
	{"id": 91, "sql": "SELECT table_field::bool, table_field::boolean FROM t"},
	{"id": 92, "sql": "SELECT true, false"},
	{"id": 93, "sql": "SELECT 1::boolean, 0::boolean"},
	{"id": 94, "sql": "SELECT $5"},
	{"id": 95, "sql": "SELECT ?"},
	{"id": 96, "sql": "INSERT INTO x (y, z) VALUES (1, 'abc')"},
	{"id": 97, "sql": "INSERT INTO x (\"user\") VALUES ('abc')"},
	{"id": 98, "sql": "INSERT INTO x (y, z) VALUES (1, 'abc') RETURNING id"},
	{"id": 99, "sql": "INSERT INTO x SELECT * FROM y"},
	{"id": 100, "sql": "WITH moved AS (DELETE FROM employees WHERE manager_name = 'Mary') INSERT INTO employees_of_mary SELECT * FROM moved"},
	{"id": 101, "sql": "INSERT INTO x (y, z) VALUES (1, 'abc') ON CONFLICT (y) DO UPDATE SET \"user\" = excluded.\"user\" RETURNING y"},
	{"id": 102, "sql": "INSERT INTO x (y, z) VALUES (1, 'abc') ON CONFLICT (y) DO NOTHING RETURNING y"},
	{"id": 103, "sql": "INSERT INTO distributors (did, dname) VALUES (10, 'Conrad International') ON CONFLICT (did) WHERE is_active DO NOTHING"},
	{"id": 104, "sql": "INSERT INTO distributors (did, dname) VALUES (9, 'Antwerp Design') ON CONFLICT ON CONSTRAINT distributors_pkey DO NOTHING"},
	{"id": 105, "sql": "INSERT INTO foo (a, b, c, d) VALUES ($1) ON CONFLICT (id) DO UPDATE SET (a, b, c, d) = (excluded.a, excluded.b, excluded.c, CASE WHEN foo.d = excluded.d THEN excluded.d END)"},
	{"id": 106, "sql": "INSERT INTO employees SELECT * FROM people WHERE 1 = 1 GROUP BY name HAVING count(name) > 1 ORDER BY name DESC LIMIT 10 OFFSET 15 FOR UPDATE"},
	{"id": 107, "sql": "INSERT INTO films VALUES ('T_601', 'Yojimbo', 106, DEFAULT, 'Drama', DEFAULT)"},
	{"id": 108, "sql": "SELECT * FROM people FOR UPDATE OF name, email"},
	{"id": 109, "sql": "SELECT name::varchar(255) FROM people"},
	{"id": 110, "sql": "SELECT name::varchar FROM people"},
	{"id": 111, "sql": "SELECT age::numeric(5, 2) FROM people"},
	{"id": 112, "sql": "SELECT age::numeric FROM people"},
	{"id": 113, "sql": "UPDATE x SET y = 1 WHERE z = 'abc'"},
	{"id": 114, "sql": "UPDATE ONLY x table_x SET y = 1 WHERE z = 'abc' RETURNING y AS changed_y"},
	{"id": 115, "sql": "WITH archived AS (DELETE FROM employees WHERE manager_name = 'Mary') UPDATE users SET archived = true WHERE users.id IN (SELECT user_id FROM moved)"},
	{"id": 116, "sql": "WITH archived AS (DELETE FROM employees WHERE manager_name = 'Mary' RETURNING user_id) UPDATE users SET archived = true FROM archived WHERE archived.user_id = id RETURNING id"},
	{"id": 117, "sql": "INSERT INTO jackdanger_card_totals (id, amount_cents, created_at) SELECT series.i, random() * 1000, (SELECT '2015-08-25 00:00:00 -0700'::timestamp + (('2015-08-25 23:59:59 -0700'::timestamp - '2015-08-25 00:00:00 -0700'::timestamp) * random())) FROM generate_series(1, 10000) series(i)"},
	{"id": 118, "sql": "UPDATE foo SET a = ?, b = ?"},
	{"id": 119, "sql": "UPDATE x SET \"user\" = 'emin'"},
	{"id": 120, "sql": "DELETE FROM x WHERE y = 1"},
	{"id": 121, "sql": "DELETE FROM ONLY x table_x USING table_z WHERE y = 1 RETURNING *"},
	{"id": 122, "sql": "WITH archived AS (DELETE FROM employees WHERE manager_name = 'Mary') DELETE FROM users WHERE users.id IN (SELECT user_id FROM moved)"},
	{"id": 123, "sql": "CREATE CAST (bigint AS int4) WITH FUNCTION int4(bigint) AS ASSIGNMENT"},
	{"id": 124, "sql": "CREATE CAST (bigint AS int4) WITHOUT FUNCTION AS IMPLICIT"},
	{"id": 125, "sql": "CREATE CAST (bigint AS int4) WITH INOUT AS ASSIGNMENT"},
	{"id": 126, "sql": "CREATE DOMAIN us_postal_code AS text CHECK (\"VALUE\" ~ E'^\\\\d{5}$' OR \"VALUE\" ~ E'^\\\\d{5}-\\\\d{4}$')"},
	{"id": 127, "sql": "CREATE FUNCTION getfoo(int) RETURNS SETOF users AS $$SELECT * FROM \"users\" WHERE users.id = $1;$$ LANGUAGE sql"},
	{"id": 128, "sql": "CREATE OR REPLACE FUNCTION getfoo(int) RETURNS SETOF users AS $$SELECT * FROM \"users\" WHERE users.id = $1;$$ LANGUAGE sql"},
	{"id": 129, "sql": "CREATE OR REPLACE FUNCTION getfoo(int) RETURNS SETOF users AS $$SELECT * FROM \"users\" WHERE users.id = $1;$$ LANGUAGE sql IMMUTABLE"},
	{"id": 130, "sql": "CREATE OR REPLACE FUNCTION getfoo(int) RETURNS SETOF users AS $$SELECT * FROM \"users\" WHERE users.id = $1;$$ LANGUAGE sql IMMUTABLE RETURNS NULL ON NULL INPUT"},
	{"id": 131, "sql": "CREATE OR REPLACE FUNCTION getfoo(int) RETURNS SETOF users AS $$SELECT * FROM \"users\" WHERE users.id = $1;$$ LANGUAGE sql IMMUTABLE CALLED ON NULL INPUT"},
	{"id": 132, "sql": "CREATE OR REPLACE FUNCTION getfoo() RETURNS text AS $$SELECT name FROM \"users\" LIMIT 1$$ LANGUAGE sql IMMUTABLE CALLED ON NULL INPUT"},
	{"id": 133, "sql": "CREATE SCHEMA myschema"},
	{"id": 134, "sql": "CREATE SCHEMA AUTHORIZATION joe"},
	{"id": 135, "sql": "CREATE SCHEMA IF NOT EXISTS test AUTHORIZATION joe"},
	{"id": 136, "sql": "CREATE SCHEMA hollywood CREATE TABLE films (title text, release date, awards text[]) CREATE VIEW winners AS SELECT title, release FROM films WHERE awards IS NOT NULL"},
	{"id": 137, "sql": "CREATE UNLOGGED TABLE cities (name text, population real, altitude double, identifier smallint, postal_code int, foreign_id bigint)"},
	{"id": 138, "sql": "CREATE TABLE IF NOT EXISTS distributors (name varchar(40) DEFAULT 'Luso Films', len interval hour to second(3), name varchar(40) DEFAULT 'Luso Films', did int DEFAULT nextval('distributors_serial'), stamp timestamp DEFAULT now() NOT NULL, stamptz timestamp with time zone, time time NOT NULL, timetz time with time zone, CONSTRAINT name_len PRIMARY KEY (name, len))"},
	{"id": 139, "sql": "CREATE TABLE types (a real, b double precision, c numeric(2, 3), d char(4), e char(5), f varchar(6), g varchar(7))"},
	{"id": 140, "sql": "CREATE TABLE types (a geometry(point) NOT NULL)"},
	{"id": 141, "sql": "CREATE TABLE tablename (colname int NOT NULL DEFAULT nextval('tablename_colname_seq'))"},
	{"id": 142, "sql": "CREATE TABLE capitals (state char(2)) INHERITS (cities)"},
	{"id": 143, "sql": "CREATE TEMPORARY TABLE temp AS SELECT c FROM t"},
	{"id": 144, "sql": "CREATE TABLE films2 AS SELECT * FROM films"},
	{"id": 145, "sql": "CREATE TEMPORARY TABLE films_recent ON COMMIT DROP AS SELECT * FROM films WHERE date_prod > $1"},
	{"id": 146, "sql": "DROP SERVER IF EXISTS foo"},
	{"id": 147, "sql": "DROP PUBLICATION mypublication"},
	{"id": 148, "sql": "DROP TYPE box"},
	{"id": 149, "sql": "DROP TABLESPACE mystuff"},
	{"id": 150, "sql": "DROP CONVERSION myname"},
	{"id": 151, "sql": "DROP SEQUENCE serial"},
	{"id": 152, "sql": "DROP INDEX title_idx"},
	{"id": 153, "sql": "DROP MATERIALIZED VIEW order_summary"},
	{"id": 154, "sql": "DROP TRIGGER if_dist_exists ON films"},
	{"id": 155, "sql": "DROP RULE newrule ON mytable"},
	{"id": 156, "sql": "DROP CAST (text AS int)"},
	{"id": 157, "sql": "DROP OPERATOR FAMILY float_ops USING btree"},
	{"id": 158, "sql": "DROP AGGREGATE myavg(int), myavg(bigint)"},
	{"id": 159, "sql": "DROP COLLATION german"},
	{"id": 160, "sql": "DROP FOREIGN DATA WRAPPER dbi"},
	{"id": 161, "sql": "DROP ACCESS METHOD heptree"},
	{"id": 162, "sql": "DROP STATISTICS IF EXISTS accounting.users_uid_creation, public.grants_user_role"},
	{"id": 163, "sql": "DROP TEXT SEARCH DICTIONARY english"},
	{"id": 164, "sql": "DROP OPERATOR CLASS widget_ops USING btree"},
	{"id": 165, "sql": "DROP POLICY p1 ON my_table"},
	{"id": 166, "sql": "DROP SUBSCRIPTION mysub"},
	{"id": 167, "sql": "DROP TEXT SEARCH CONFIGURATION my_english"},
	{"id": 168, "sql": "DROP EVENT TRIGGER snitch"},
	{"id": 169, "sql": "DROP TEXT SEARCH PARSER my_parser"},
	{"id": 170, "sql": "DROP EXTENSION hstore"},
	{"id": 171, "sql": "DROP DOMAIN box"},
	{"id": 172, "sql": "DROP TEXT SEARCH TEMPLATE thesaurus"},
	{"id": 173, "sql": "DROP TRANSFORM FOR hstore LANGUAGE plpythonu"},
	{"id": 174, "sql": "DROP FOREIGN TABLE films, distributors"},
	{"id": 175, "sql": "DROP FUNCTION sqrt(int)"},
	{"id": 176, "sql": "DROP FUNCTION update_employee_salaries()"},
	{"id": 177, "sql": "DROP FUNCTION update_employee_salaries"},
	{"id": 178, "sql": "DROP TABLE IF EXISTS any_table CASCADE"},
	{"id": 179, "sql": "DROP TABLE IF EXISTS any_table"},
	{"id": 180, "sql": "DROP SCHEMA IF EXISTS any_schema"},
	{"id": 181, "sql": "ALTER TABLE distributors DROP CONSTRAINT distributors_pkey, ADD CONSTRAINT distributors_pkey PRIMARY KEY USING INDEX dist_id_temp_idx, ADD CONSTRAINT zipchk CHECK (char_length(zipcode) = 5), ALTER COLUMN tstamp DROP DEFAULT, ALTER COLUMN tstamp TYPE timestamp with time zone USING 'epoch'::timestamp with time zone + (date_part('epoch', tstamp) * '1 second'::interval), ALTER COLUMN tstamp SET DEFAULT now(), ALTER COLUMN tstamp DROP DEFAULT, ALTER COLUMN tstamp SET STATISTICS -5, ADD COLUMN some_int int NOT NULL, DROP IF EXISTS other_column CASCADE"},
	{"id": 182, "sql": "ALTER TABLE distributors RENAME TO suppliers"},
	{"id": 183, "sql": "ALTER TABLE distributors ADD CONSTRAINT distfk FOREIGN KEY (address) REFERENCES addresses (address)"},
	{"id": 184, "sql": "ALTER TABLE distributors ADD CONSTRAINT distfk FOREIGN KEY (address) REFERENCES addresses (address) NOT VALID"},
	{"id": 185, "sql": "ALTER TRIGGER emp_stamp ON emp RENAME TO emp_track_chgs"},
	{"id": 186, "sql": "ALTER CONVERSION iso_8859_1_to_utf8 RENAME TO latin1_to_unicode"},
	{"id": 187, "sql": "ALTER TABLE distributors RENAME CONSTRAINT zipchk TO zip_check"},
	{"id": 188, "sql": "ALTER INDEX distributors RENAME TO suppliers"},
	{"id": 189, "sql": "ALTER MATERIALIZED VIEW foo RENAME TO bar"},
	{"id": 190, "sql": "ALTER TABLESPACE index_space RENAME TO fast_raid"},
	{"id": 191, "sql": "ALTER TABLE distributors RENAME COLUMN address TO city"},
	{"id": 192, "sql": "ALTER COLLATION \"de_DE\" RENAME TO german"},
	{"id": 193, "sql": "ALTER TYPE electronic_mail RENAME TO email"},
	{"id": 194, "sql": "ALTER DOMAIN zipcode RENAME CONSTRAINT zipchk TO zip_check"},
	{"id": 195, "sql": "ALTER AGGREGATE myavg(int) RENAME TO my_average"},
	{"id": 196, "sql": "ALTER FUNCTION sqrt(int) RENAME TO square_root"},
	{"id": 197, "sql": "ALTER RULE notify_all ON emp RENAME TO notify_me"},
	{"id": 198, "sql": "BEGIN"},
	{"id": 199, "sql": "BEGIN ISOLATION LEVEL SERIALIZABLE"},
	{"id": 200, "sql": "BEGIN READ ONLY"},
	{"id": 201, "sql": "BEGIN ISOLATION LEVEL READ COMMITTED, DEFERRABLE"},
	{"id": 202, "sql": "START TRANSACTION READ ONLY"},
	{"id": 203, "sql": "ROLLBACK"},
	{"id": 204, "sql": "ROLLBACK AND CHAIN"},
	{"id": 205, "sql": "COMMIT"},
	{"id": 206, "sql": "COMMIT AND CHAIN"},
	{"id": 207, "sql": "SAVEPOINT \"x y\"id"},
	{"id": 208, "sql": "ROLLBACK TO SAVEPOINT x"},
	{"id": 209, "sql": "RELEASE x"},
	{"id": 210, "sql": "SELECT rank(*) OVER ()"},
	{"id": 211, "sql": "SELECT rank(*) OVER (PARTITION BY id)"},
	{"id": 212, "sql": "SELECT rank(*) OVER (ORDER BY id)"},
	{"id": 213, "sql": "SELECT rank(*) OVER (PARTITION BY id, id2 ORDER BY id DESC, id2)"},
	{"id": 214, "sql": "SELECT rank(*) OVER named_window"},
	{"id": 215, "sql": "SELECT max(create_date::date) FILTER (WHERE cancel_date IS NULL) OVER (ORDER BY create_date DESC) FROM tb_x"},
	{"id": 216, "sql": "ALTER VIEW foo RENAME TO bar"},
	{"id": 217, "sql": "CREATE OR REPLACE TEMPORARY VIEW view_a AS SELECT * FROM a(1) WITH CHECK OPTION"},
	{"id": 218, "sql": "DROP VIEW kinds"},
	{"id": 219, "sql": "CREATE VIEW view_a (a, b) AS WITH RECURSIVE view_a(a, b) AS (SELECT * FROM a(1)) SELECT a, b FROM view_a"},
	{"id": 220, "sql": "SET statement_timeout TO 10000"},
	{"id": 221, "sql": "SET search_path TO my_schema, public"},
	{"id": 222, "sql": "SET LOCAL search_path TO my_schema, public"},
	{"id": 223, "sql": "SET \"user\" TO ?"},
	{"id": 224, "sql": "VACUUM"},
	{"id": 225, "sql": "VACUUM t"},
	{"id": 226, "sql": "VACUUM (FULL) t"},
	{"id": 227, "sql": "VACUUM (FREEZE) t"},
	{"id": 228, "sql": "VACUUM (VERBOSE) t"},
	{"id": 229, "sql": "VACUUM (ANALYZE) t"},
	{"id": 230, "sql": "VACUUM (FULL, FREEZE, VERBOSE, ANALYZE)"},
	{"id": 231, "sql": "VACUUM (ANALYZE) t(a, b)"},
	{"id": 232, "sql": "LOCK TABLE t"},
	{"id": 233, "sql": "LOCK TABLE t, u"},
	{"id": 234, "sql": "EXPLAIN SELECT a FROM b"},
	{"id": 235, "sql": "EXPLAIN (ANALYZE) SELECT a FROM b"},
	{"id": 236, "sql": "EXPLAIN (ANALYZE, BUFFERS) SELECT a FROM b"},
	{"id": 237, "sql": "COPY t FROM STDIN"},
	{"id": 238, "sql": "COPY t(c1, c2) FROM STDIN"},
	{"id": 239, "sql": "COPY t FROM PROGRAM '/bin/false'"},
	{"id": 240, "sql": "COPY t FROM '/dev/null'"},
	{"id": 241, "sql": "COPY t TO STDOUT"},
	{"id": 242, "sql": "COPY (SELECT 1 FROM foo) TO STDOUT"},
	{"id": 243, "sql": "COPY t FROM STDIN WITH (convert_selectively, some_str test, some_num 1, some_list (a), some_star *)"},
	{"id": 244, "sql": "DO $$BEGIN PERFORM * FROM information_schema.tables; END$$"},
	{"id": 245, "sql": "DO LANGUAGE plpgsql $$ BEGIN PERFORM * FROM information_schema.tables; END $$"},
	{"id": 246, "sql": "DO $$ BEGIN PERFORM * FROM information_schema.tables; END $$ LANGUAGE plpgsql"},
	{"id": 247, "sql": "DISCARD ALL"},
	{"id": 248, "sql": "DISCARD PLANS"},
	{"id": 249, "sql": "DISCARD SEQUENCES"},
	{"id": 250, "sql": "DISCARD TEMP"},
	{"id": 251, "sql": "CREATE AGGREGATE aggregate1 (int4) (sfunc = sfunc1, stype = stype1)"},
	{"id": 252, "sql": "CREATE AGGREGATE aggregate1 (int4, bool) (sfunc = sfunc1, stype = stype1)"},
	{"id": 253, "sql": "CREATE AGGREGATE aggregate1 (*) (sfunc = sfunc1, stype = stype1)"},
	{"id": 254, "sql": "CREATE AGGREGATE aggregate1 (int4) (sfunc = sfunc1, stype = stype1, finalfunc_extra, mfinalfuncextra)"},
	{"id": 255, "sql": "CREATE AGGREGATE aggregate1 (int4) (sfunc = sfunc1, stype = stype1, finalfunc_modify = read_only, parallel = restricted)"},
	{"id": 256, "sql": "CREATE AGGREGATE percentile_disc (float8 ORDER BY anyelement) (sfunc = ordered_set_transition, stype = internal, finalfunc = percentile_disc_final, finalfunc_extra)"},
	{"id": 257, "sql": "CREATE OPERATOR + (procedure = plusfunc)"},
	{"id": 258, "sql": "CREATE OPERATOR + (procedure = plusfunc, leftarg = int4, rightarg = int4)"},
	{"id": 259, "sql": "CREATE OPERATOR + (procedure = plusfunc, hashes, merges)"},
	{"id": 260, "sql": "CREATE TYPE type1"},
	{"id": 261, "sql": "CREATE TYPE type1 AS (attr1 int4, attr2 bool)"},
	{"id": 262, "sql": "CREATE TYPE type1 AS (attr1 int4 COLLATE collation1, attr2 bool)"},
	{"id": 263, "sql": "CREATE TYPE type1 AS ENUM ('value1', 'value2', 'value3')"},
	{"id": 264, "sql": "CREATE TYPE type1 AS RANGE (subtype = int4)"},
	{"id": 265, "sql": "CREATE TYPE type1 AS RANGE (subtype = int4, receive = receive_func, passedbyvalue)"},
	{"id": 266, "sql": "CREATE TYPE type1 (input = input1, output = output1)"},
	{"id": 267, "sql": "CREATE TYPE type1 (input = input1, output = output1, passedbyvalue)"},
	{"id": 268, "sql": "GRANT select ON \"table\" TO \"user\"id"},
	{"id": 269, "sql": "GRANT select, update, insert ON \"table\" TO \"user\"id"},
	{"id": 270, "sql": "GRANT select ON ALL TABLES IN SCHEMA schema TO \"user\"id"},
	{"id": 271, "sql": "GRANT select ON \"table\" TO user1, user2"},
	{"id": 272, "sql": "GRANT select ON \"table\" TO public"},
	{"id": 273, "sql": "GRANT select ON \"table\" TO CURRENT_USER"},
	{"id": 274, "sql": "GRANT select ON \"table\" TO SESSION_USER"},
	{"id": 275, "sql": "GRANT ALL ON \"table\" TO \"user\"id"},
	{"id": 276, "sql": "GRANT select ON \"table\" TO \"user\" WITH GRANT OPTION"},
	{"id": 277, "sql": "GRANT select (\"column\") ON \"table\" TO \"user\"id"},
	{"id": 278, "sql": "GRANT select (column1, column2) ON \"table\" TO \"user\"id"},
	{"id": 279, "sql": "GRANT usage ON SEQUENCE sequence TO \"user\"id"},
	{"id": 280, "sql": "GRANT usage ON ALL SEQUENCES IN SCHEMA schema TO \"user\"id"},
	{"id": 281, "sql": "GRANT create ON DATABASE database TO \"user\"id"},
	{"id": 282, "sql": "GRANT usage ON DOMAIN domain TO \"user\"id"},
	{"id": 283, "sql": "GRANT usage ON FOREIGN DATA WRAPPER fdw TO \"user\"id"},
	{"id": 284, "sql": "GRANT usage ON FOREIGN SERVER server TO \"user\"id"},
	{"id": 285, "sql": "GRANT execute ON FUNCTION function TO \"user\"id"},
	{"id": 286, "sql": "GRANT execute ON FUNCTION function() TO \"user\"id"},
	{"id": 287, "sql": "GRANT execute ON FUNCTION function(string) TO \"user\"id"},
	{"id": 288, "sql": "GRANT execute ON FUNCTION function(string, string, boolean) TO \"user\"id"},
	{"id": 289, "sql": "GRANT execute ON ALL FUNCTIONS IN SCHEMA schema TO \"user\"id"},
	{"id": 290, "sql": "GRANT usage ON LANGUAGE plpgsql TO \"user\"id"},
	{"id": 291, "sql": "GRANT select ON LARGE OBJECT 1234 TO \"user\"id"},
	{"id": 292, "sql": "GRANT create ON SCHEMA schema TO \"user\"id"},
	{"id": 293, "sql": "GRANT create ON TABLESPACE tablespace TO \"user\"id"},
	{"id": 294, "sql": "GRANT usage ON TYPE type TO \"user\"id"},
	{"id": 295, "sql": "GRANT role TO \"user\"id"},
	{"id": 296, "sql": "GRANT role1, role2 TO \"user\"id"},
	{"id": 297, "sql": "GRANT role TO \"user\" WITH ADMIN OPTION"},
	{"id": 298, "sql": "DROP ROLE jonathan"},
	{"id": 299, "sql": "REVOKE ALL ON kinds FROM manuel"},
	{"id": 300, "sql": "REVOKE admins FROM joe"},
	{"id": 301, "sql": "REVOKE insert ON films FROM public"},
	{"id": 302, "sql": "SELECT m.name AS mname, pname FROM manufacturers m LEFT JOIN LATERAL get_product_names(m.id) pname ON true"},
	{"id": 303, "sql": "SELECT m.name AS mname, pname FROM manufacturers m LEFT JOIN LATERAL get_product_names(m.id) pname ON true; INSERT INTO manufacturers_daily (a, b) SELECT a, b FROM manufacturers"},
	{"id": 304, "sql": "SELECT m.name AS mname, pname FROM manufacturers m LEFT JOIN LATERAL get_product_names(m.id) pname ON true; UPDATE users SET name = 'bobby; drop tables'; INSERT INTO manufacturers_daily (a, b) SELECT a, b FROM manufacturers"},
	{"id": 305, "sql": "SELECT * FROM a CROSS JOIN (b CROSS JOIN c)"},
	{"id": 306, "sql": "SELECT 1 FOR UPDATE"},
	{"id": 307, "sql": "SELECT 1 FOR UPDATE NOWAIT"},
	{"id": 308, "sql": "SELECT 1 FOR UPDATE SKIP LOCKED"},
	{"id": 309, "sql": "COMMENT ON POLICY a ON b IS 'test'"},
	{"id": 310, "sql": "COMMENT ON PROCEDURE a() IS 'test'"},
	{"id": 311, "sql": "COMMENT ON ROUTINE a() IS 'test'"},
	{"id": 312, "sql": "COMMENT ON TRANSFORM FOR int4 LANGUAGE sql IS 'test'"},
	{"id": 313, "sql": "COMMENT ON OPERATOR CLASS a USING b IS 'test'"},
	{"id": 314, "sql": "COMMENT ON OPERATOR FAMILY a USING b IS 'test'"},
	{"id": 315, "sql": "COMMENT ON LARGE OBJECT 42 IS 'test'"},
	{"id": 316, "sql": "COMMENT ON CAST (int4 AS int8) IS 'test'"},
	{"id": 317, "sql": "SELECT ROW(1 + 2)"},
	{"id": 318, "sql": "ALTER TABLE a ALTER COLUMN b SET DEFAULT 1"},
	{"id": 319, "sql": "ALTER TABLE a ALTER COLUMN b DROP DEFAULT"},
	{"id": 320, "sql": "SELECT (3 + 3) OPERATOR(pg_catalog.*) 2"},
	{"id": 321, "sql": "SELECT 3 + (3 * 2)"},
	{"id": 322, "sql": "SELECT LIMIT ALL"},
	{"id": 323, "sql": "SELECT * FROM ROWS FROM (foo() AS (foo_res_a text COLLATE a, foo_res_b text))"},
	{"id": 324, "sql": "CREATE DATABASE x OWNER abc CONNECTION LIMIT 5"},
	{"id": 325, "sql": "CREATE DATABASE x ENCODING \"SQL_ASCII\"id"},
	{"id": 326, "sql": "CREATE DATABASE x LC_COLLATE \"en_US.UTF-8\"id"},
	{"id": 327, "sql": "CREATE DATABASE x LOCATION DEFAULT"},
	{"id": 328, "sql": "CREATE DATABASE x TABLESPACE abc"},
	{"id": 329, "sql": "CREATE DATABASE x TEMPLATE TRUE"},
	{"id": 330, "sql": "ALTER DATABASE x CONNECTION LIMIT 5"},
	{"id": 331, "sql": "ALTER DATABASE x ALLOW_CONNECTIONS FALSE"},
	{"id": 332, "sql": "ALTER DATABASE x IS_TEMPLATE TRUE"},
	{"id": 333, "sql": "ALTER DATABASE x TABLESPACE abc"},
	{"id": 334, "sql": "ALTER DATABASE x SET work_mem TO \"10MB\"id"},
	{"id": 335, "sql": "ALTER EXTENSION x UPDATE"},
	{"id": 336, "sql": "ALTER EXTENSION x UPDATE TO \"1.2\"id"},
	{"id": 337, "sql": "ALTER EXTENSION x ADD ACCESS METHOD a"},
	{"id": 338, "sql": "ALTER EXTENSION x DROP ACCESS METHOD a"},
	{"id": 339, "sql": "ALTER EXTENSION x ADD AGGREGATE a(b)"},
	{"id": 340, "sql": "ALTER EXTENSION x ADD CAST (a AS b)"},
	{"id": 341, "sql": "ALTER EXTENSION x ADD COLLATION a"},
	{"id": 342, "sql": "ALTER EXTENSION x ADD CONVERSION a"},
	{"id": 343, "sql": "ALTER EXTENSION x ADD DOMAIN a"},
	{"id": 344, "sql": "ALTER EXTENSION x ADD FUNCTION a(b)"},
	{"id": 345, "sql": "ALTER EXTENSION x ADD LANGUAGE a"},
	{"id": 346, "sql": "ALTER EXTENSION x ADD OPERATOR ~~(a, b)"},
	{"id": 347, "sql": "ALTER EXTENSION x ADD OPERATOR CLASS a USING b"},
	{"id": 348, "sql": "ALTER EXTENSION x ADD OPERATOR FAMILY a USING b"},
	{"id": 349, "sql": "ALTER EXTENSION x ADD PROCEDURE a(b)"},
	{"id": 350, "sql": "ALTER EXTENSION x ADD ROUTINE a(b)"},
	{"id": 351, "sql": "ALTER EXTENSION x ADD SCHEMA a"},
	{"id": 352, "sql": "ALTER EXTENSION x ADD EVENT TRIGGER a"},
	{"id": 353, "sql": "ALTER EXTENSION x ADD TABLE a"},
	{"id": 354, "sql": "ALTER EXTENSION x ADD TEXT SEARCH PARSER a"},
	{"id": 355, "sql": "ALTER EXTENSION x ADD TEXT SEARCH DICTIONARY a"},
	{"id": 356, "sql": "ALTER EXTENSION x ADD TEXT SEARCH TEMPLATE a"},
	{"id": 357, "sql": "ALTER EXTENSION x ADD TEXT SEARCH CONFIGURATION a"},
	{"id": 358, "sql": "ALTER EXTENSION x ADD SEQUENCE a"},
	{"id": 359, "sql": "ALTER EXTENSION x ADD VIEW a"},
	{"id": 360, "sql": "ALTER EXTENSION x ADD MATERIALIZED VIEW a"},
	{"id": 361, "sql": "ALTER EXTENSION x ADD FOREIGN TABLE a"},
	{"id": 362, "sql": "ALTER EXTENSION x ADD FOREIGN DATA WRAPPER a"},
	{"id": 363, "sql": "ALTER EXTENSION x ADD SERVER a"},
	{"id": 364, "sql": "ALTER EXTENSION x ADD TRANSFORM FOR a LANGUAGE b"},
	{"id": 365, "sql": "ALTER EXTENSION x ADD TYPE a"},
	{"id": 366, "sql": "ALTER TABLESPACE x SET (seq_page_cost=3)"},
	{"id": 367, "sql": "ALTER TABLESPACE x RESET (random_page_cost)"},
	{"id": 368, "sql": "CREATE TABLESPACE x LOCATION 'a'"},
	{"id": 369, "sql": "CREATE TABLESPACE x OWNER a LOCATION 'b' WITH (random_page_cost=42, seq_page_cost=3)"},
	{"id": 370, "sql": "ALTER FUNCTION x(y) DEPENDS ON EXTENSION a"},
	{"id": 371, "sql": "ALTER FUNCTION x(y) NO DEPENDS ON EXTENSION a"},
	{"id": 372, "sql": "ALTER PROCEDURE x(y) DEPENDS ON EXTENSION a"},
	{"id": 373, "sql": "ALTER ROUTINE x(y) DEPENDS ON EXTENSION a"},
	{"id": 374, "sql": "ALTER TRIGGER x ON y DEPENDS ON EXTENSION a"},
	{"id": 375, "sql": "ALTER MATERIALIZED VIEW x DEPENDS ON EXTENSION a"},
	{"id": 376, "sql": "ALTER INDEX x DEPENDS ON EXTENSION a"},
	{"id": 377, "sql": "LOAD 'test file'"},
	{"id": 378, "sql": "ALTER SYSTEM SET fsync TO OFF"},
	{"id": 379, "sql": "ALTER SYSTEM RESET fsync"},
	{"id": 380, "sql": "CREATE EXTENSION x"},
	{"id": 381, "sql": "CREATE EXTENSION IF NOT EXISTS x CASCADE VERSION \"1.2\" SCHEMA a"},
	{"id": 382, "sql": "CREATE TABLE like_constraint_rename_cache (LIKE constraint_rename_cache INCLUDING ALL)"},
	{"id": 383, "sql": "COPY manual_export TO STDOUT WITH (FORMAT CSV, HEADER)"},
	{"id": 384, "sql": "SELECT 1 FROM a.b.c"}
    ]
}
